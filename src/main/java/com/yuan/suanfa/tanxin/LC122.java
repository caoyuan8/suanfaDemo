package com.yuan.suanfa.tanxin;


/**
 * LC122. 买卖股票的最佳时机 II（贪心解法）
 *
 * 给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。
 *
 * 在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。
 *
 * 返回 你能获得的 最大 利润 。
 *
 *
 *
 * 示例 1：
 *
 * 输入：prices = [7,1,5,3,6,4]
 * 输出：7
 * 解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4。
 * 随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3。
 * 最大总利润为 4 + 3 = 7 。
 * 示例 2：
 *
 * 输入：prices = [1,2,3,4,5]
 * 输出：4
 * 解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4。
 * 最大总利润为 4 。
 * 示例 3：
 *
 * 输入：prices = [7,6,4,3,1]
 * 输出：0
 * 解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0。
 *
 *
 * 提示：
 *
 * 1 <= prices.length <= 3 * 104
 * 0 <= prices[i] <= 104
 *
 */
public class LC122 {

    public static void main(String[] args) {
        System.out.println(maxProfit(new int[]{7,1,5,3,6,4}));
        System.out.println(maxProfit(new int[]{1,2,3,4,5}));
        System.out.println(maxProfit(new int[]{7,6,4,3,1}));
    }

    public static int maxProfit(int[] prices) {
// 最大利润初始为 0
        int profit = 0;
        // 从第 2 天开始（索引为 1 ）
        // 去查看当天是否需要采取【卖出】的操作
        for (int i = 1; i < prices.length; i++) {
            // 计算当天的股票价格与昨天的股票价格的差值
            int tmp = prices[i] - prices[i - 1];
            // 如果发现当天的股票价格大于了昨天的股票价格
            // 那么在当天采取【卖出】操作可以带来正向收益，即产生利润
            // 于是完全可以卖出
            // 而这个利润就可以进行累加起来
            if (tmp > 0) profit += tmp;
            // 如果发现当天的股票价格小于了昨天的股票价格
            // 那么不能采取【卖出】操作，因为这会带来负向收益，即产生亏损
            // 导致总的利润值变小
        }

        // 返回结果
        return profit;
    }

}
